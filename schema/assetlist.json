{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "pacific-1": {
        "type": "array",
        "items": { "$ref": "#/definitions/token" },
        "description": "The list of tokens on mainnet (pacific-1)"
      },
      "atlantic-2": {
        "type": "array",
        "items": { "$ref": "#/definitions/token" },
        "description": "The list of tokens on testnet (atlantic-2)"
      },
      "arctic-1": {
        "type": "array",
        "items": { "$ref": "#/definitions/token" },
        "description": "The list of tokens on devnet (arctic-1)"
      },
      "sei-devnet-3": {
        "type": "array",
        "items": { "$ref": "#/definitions/token" },
        "description": "The list of tokens on sei-devnet-3"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "token": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A short description about the token"
          },
          "denom_units": {
            "type": "array",
            "description": "The denominations in which the Token is commonly recognized or used.",
            "items": [
              { "$ref": "#/definitions/denom_unitA" }, 
              { "$ref": "#/definitions/denom_unitB" }
            ],
            "minItems": 2,
            "maxItems": 2
          },
          "base": {
            "type": "string",
            "description": "The base identifier of this token. This should be the contract address for cw20/erc20 tokens, or the base denom for tokenfactory (factory/*) and ibc (ibc/*) tokens."
          },
          "display": {
            "type": "string",
            "description": "The display name of the token"
          },
          "name": {
            "type": "string",
            "description": "The name of the token. This field is used as a unique identifier in this assetlist."
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for the token (eg SEI)"
          },
          "images": {
            "type": "object",
            "description": "Images of various file formats of the asset's logo",
            "properties": {
              "png": {
                "type": "string",
                "format": "uri-reference",
                "description": "A .png of the asset's logo"
              },
              "svg": {
                "type": "string",
                "format": "uri-reference",
                "description": "A .svg of the asset's logo"
              }
            }
          },
          "coingecko_id": {
            "type": "string",
            "description": "[OPTIONAL] The coingecko id to fetch asset data from coingecko v3 api. See https://api.coingecko.com/api/v3/coins/list"
          },
          "type_asset": {
            "type": "string",
            "enum": ["sdk.coin", "cw20", "erc20", "ics20"],
            "default": "sdk.coin",
            "description": "The type of asset. sdk.coin refers to native (Tokenfactory) tokens."
          },
          "pointer_contract": {
            "type": "object",
            "description": "[OPTIONAL] The details about the pointer contract to this asset.",
            "properties": {
              "address": {
                "type": "string",
                "description": "The address of the pointer contract to this asset."
              },
              "type_asset": {
                "type": "string",
                "enum": ["cw20", "erc20"],
                "description": "The asset type of the pointer contract."
              }
            }
          },
          "traces": {
            "type": "array",
            "description": "The origin of the asset, starting with the index, and capturing all transitions in form and location.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/$defs/ibc_transition"
                },
                {
                  "$ref": "#/$defs/ibc_cw20_transition"
                },
                {
                  "$ref": "#/$defs/non_ibc_transition"
                }
              ]
            },
            "minContains": 1
          }
        },
        "required": [
          "description",
          "denom_units",
          "base",
          "display",
          "name",
          "symbol",
          "images",
          "type_asset"
        ],
        "uniqueItems": true,
        "additionalProperties": false
      },
      "denom_unitA": {
        "type": "object",
        "description": "A type of denomination where the exponent is always 0",
        "properties": {
          "denom": {
            "type": "string",
            "description": "The possible denomination of this token"
          },
          "exponent": {
            "type": "integer",
            "description": "The exponent of this denom - Should be 0",
            "minimum": 0,
            "maximum": 0
          }
        },
        "required": ["denom", "exponent"],
        "additionalProperties": false
      },
      "denom_unitB": {
        "type": "object",
        "description": "A type of denomination with an explicit exponent",
        "properties": {
          "denom": {
            "type": "string",
            "description": "The possible denomination of this token"
          },
          "exponent": {
            "type": "integer",
            "description": "The exponent n of this denom, where 1 of this denom = 10^n of the base denom. For example, usei (the base denom) has exponent of 0 while sei has an exponent of 6 since 1sei is 1000000usei",
            "minimum": 0
          }
        },
        "required": ["denom", "exponent"],
        "additionalProperties": false
      },
      "ibc_transition": {
        "type": "object",
        "required": [
          "type",
          "counterparty",
          "chain"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ibc"
            ]
          },
          "counterparty": {
              "type": "object",
              "required": [
                "chain_name",
                "base_denom",
                "channel_id"
              ],
              "properties": {
                "chain_name": {
                  "type": "string",
                  "description": "The name of the counterparty chain. (must match exactly the chain name used in the Chain Registry)"
                },
                "base_denom": {
                  "type": "string",
                  "description": "The base unit of the asset on its source platform. E.g., when describing ATOM from Cosmos Hub, specify 'uatom', NOT 'atom' nor 'ATOM'; base units are unique per platform."
                },
                "channel_id": {
                  "type": "string",
                  "pattern": "^channel-(JEnb|\\d+)$",
                  "description": "The counterparty IBC transfer channel(, e.g., 'channel-1')."
                }
              },
              "additionalProperties": false
          },
          "chain": {
            "type": "object",
            "required": [
              "channel_id",
              "path"
            ],
            "properties": {
              "channel_id": {
                "type": "string",
                "pattern": "^channel-\\d+$",
                "description": "The chain's IBC transfer channel(, e.g., 'channel-1')."
              },
              "path": {
                "type": "string",
                "description": "The port/channel/denom input string that generates the 'ibc/...' denom." 
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "ibc_cw20_transition": {
        "type": "object",
        "required": [
          "type",
          "counterparty",
          "chain"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ibc-cw20"
            ]
          },
          "counterparty": {
            "type": "object",
            "required": [
              "chain_name",
              "base_denom",
              "port",
              "channel_id"
            ],
            "properties": {
              "chain_name": {
                "type": "string",
                "description": "The name of the counterparty chain. (must match exactly the chain name used in the Chain Registry)"
              },
              "base_denom": {
                "type": "string",
                "description": "The base unit of the asset on its source platform. E.g., when describing ATOM from Cosmos Hub, specify 'uatom', NOT 'atom' nor 'ATOM'; base units are unique per platform."
              },
              "port": {
                "type": "string",
                "description": "The port used to transfer IBC assets; often 'transfer', but sometimes varies, e.g., for outgoing cw20 transfers."
              },
              "channel_id": {
                "type": "string",
                "pattern": "^channel-\\d+$",
                "description": "The counterparty IBC transfer channel(, e.g., 'channel-1')."
              }
            },
            "additionalProperties": false
          },
          "chain": {
            "type": "object",
            "required": [
              "port",
              "channel_id",
              "path"
            ],
            "properties": {
              "port": {
                "type": "string",
                "description": "The port used to transfer IBC assets; often 'transfer', but sometimes varies, e.g., for outgoing cw20 transfers."
              },
              "channel_id": {
                "type": "string",
                "pattern": "^channel-\\d+$",
                "description": "The chain's IBC transfer channel(, e.g., 'channel-1')."
              },
              "path": {
                "type": "string",
                "description": "The port/channel/denom input string that generates the 'ibc/...' denom." 
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "non_ibc_transition": {
        "type": "object",
        "required": [
          "type",
          "counterparty",
          "provider"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bridge",
              "liquid-stake",
              "synthetic",
              "wrapped",
              "additional-mintage",
              "test-mintage"
            ]
          },
          "counterparty": {
            "type": "object",
            "required": [
              "chain_name",
              "base_denom"
            ],
            "properties": {
              "chain_name": {
                "type": "string",
                "description": "The chain or platform from which the asset originates. E.g., 'cosmoshub', 'ethereum', 'forex', or 'nasdaq'"
              },
              "base_denom": {
                "type": "string"
              },
              "contract": {
                "type": "string",
                "description": "The contract address where the transition takes place, where applicable. E.g., The Ethereum contract that locks up the asset while it's minted on another chain."
              }
            },
            "additionalProperties": false
          },
          "chain": {
            "type": "object",
            "required": [
              "contract"
            ],
            "properties": {
              "contract": {
                "type": "string",
                "description": "The contract address where the transition takes place, where applicable. E.g., The Ethereum contract that locks up the asset while it's minted on another chain."
              }
            },
            "additionalProperties": false
          },
          "provider": {
            "type": "string",
            "description": "The entity offering the service. E.g., 'Gravity Bridge' [Network] or 'Tether' [Company]."
          }
        },
        "additionalProperties": false
      }
    }
  }